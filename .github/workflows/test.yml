name: Deploy Node.js app on EKS

on:
  push:
    tags:
      - dev-*

env:
  NAMESPACE: amit-dev
  HELM_REPO_NAME: node-app
  ECR_REPO_URL: 884612158688.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  get-version-from-tag:
    runs-on: dev-runner
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

  build-test-push:
    runs-on: dev-runner
    needs: get-version-from-tag
    env:
      aws_region: ${{ secrets.DEV_AWS_Region }}
      ECR_REPOSITORY: ${{ github.event.repository.name }}
      IMAGE_TAG: ${{ needs.get-version-from-tag.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_Region }}

      - name: Create ECR Repository if not exists
        run: |
          echo "Checking ECR repository $ECR_REPOSITORY in region $aws_region..."
          output=$(aws ecr describe-repositories --region "$aws_region" --repository-names "$ECR_REPOSITORY" 2>&1)
          if [ $? -ne 0 ]; then
            if echo "${output}" | grep -q RepositoryNotFoundException; then
              echo "Repository not found. Creating it..."
              aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region "$aws_region"
            else
              echo "Unexpected error: ${output}"
              exit 1
            fi
          else
            echo "ECR repository already exists."
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          echo "Checking if 'latest' image exists in ECR..."
          latest_exists=$(aws ecr list-images --region "$aws_region" --repository-name "$ECR_REPOSITORY" | grep -q '"latest"'; echo $?)

          if [ "$latest_exists" -eq 0 ]; then
            echo "Pulling latest image for caching..."
            docker pull $ECR_REPO_URL/$ECR_REPOSITORY:latest
            docker build --cache-from $ECR_REPO_URL/$ECR_REPOSITORY:latest \
              -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          else
            echo "No latest image found. Building without cache..."
            docker build -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          fi

      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REPO_URL/$ECR_REPOSITORY:latest
          docker push $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPO_URL/$ECR_REPOSITORY:latest
