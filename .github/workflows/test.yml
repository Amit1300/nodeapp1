name: Deploy Node.js app on EKS

on:
  push:
    tags:
      - dev-*

env:
  NAMESPACE: amit-dev
  HELM_REPO_NAME: node-app
  ECR_REPO_URL: 884612158688.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  get-version-from-tag:
    runs-on: dev-runner
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

  build-test-push:
    runs-on: dev-runner
    needs: get-version-from-tag
    env:
      aws_region: ${{ secrets.DEV_AWS_Region }}
      ECR_REPOSITORY: ${{ github.event.repository.name }}
      IMAGE_TAG: ${{ needs.get-version-from-tag.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_Region }}

      - name: Create ECR Repository if not exists
        shell: bash
        env:
          aws_region: ${{ secrets.DEV_AWS_Region }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
        run: |
          echo "== START CREATE REPO"
          echo "== CHECK REPO EXISTS"
          set +e
          output=$(aws ecr describe-repositories --region "$aws_region" --repository-names "$ECR_REPOSITORY" 2>&1)
          exit_code=$?
          set -e

          if [ $exit_code -ne 0 ]; then
            if echo "$output" | grep -q RepositoryNotFoundException; then
              echo "== REPO DOESN'T EXIST, CREATING.."
              aws ecr create-repository \
                --region "$aws_region" \
                --repository-name "$ECR_REPOSITORY" \
                --image-scanning-configuration scanOnPush=true
              echo "== FINISHED CREATE REPO"
            else
              echo "❌ Unexpected error while checking ECR:"
              echo "$output"
              exit 1
            fi
          else
            echo "✅ ECR repository '$ECR_REPOSITORY' already exists."
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          echo "Checking if 'latest' image exists in ECR..."
          output=$(aws ecr list-images --region "$aws_region" --repository-name "$ECR_REPOSITORY" | grep latest | tr -d '" ,' | cut -d ':' -f 2)
          echo "Found: $output"

          if [[ "$output" == "latest" ]]; then
            echo "Pulling latest image for cache..."
            docker pull $ECR_REPO_URL/$ECR_REPOSITORY:latest
            docker build \
              --cache-from $ECR_REPO_URL/$ECR_REPOSITORY:latest \
              -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG \
              -f Dockerfile .
          else
            echo "No latest image found. Building without cache..."
            docker build -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          fi

      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REPO_URL/$ECR_REPOSITORY:latest
          docker push $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPO_URL/$ECR_REPOSITORY:latest
